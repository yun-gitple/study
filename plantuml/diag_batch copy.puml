@startuml diag performance

title 진단 속도 개선
skinparam sequenceMessageAlign center

box "깃플 업무"
participant "TaskService\n(main)" as task
participant "Queue\n(bull)" as queue
participant "BatchService\n(batch)" as batch
end box

box "인텔리 업무"
participant "DiagService\n(diag)" as diag #LightBlue
participant "CacheService\n(redis)" as cache
participant "FrontEnd\n(app)" as front #LightYellow
end box

task -> queue: 진단 배치잡 등록하기(daily or weekly)
== 배치잡 등록 ==

batch -> queue: 1. 진단 배치잡 가져오기(daily or weekly)
note left of diag: 8번과 동일 api 호출 (cache == false)\napi는 항목별로 필요(7개, 대출/저축/투자자산/...)
queue -> diag: 2. 배치 함수 실행하기(진단 api 7개 호출하기(cache == false))
diag -> diag: 3. 진단 수행하기
diag -> cache: 4. 진단 수행 결과 저장하기
== 배치잡 실행 ==

group case1 (cache == true)
  front -> diag: 5. 진단 api 호출 (cache == true),\n7객 항목별 각각 호출
  diag --> front: 6. 배치 결과 리턴하기 (진단 결과 exists or not)
  alt if 진단결과 == empty
    note left of front: 8번과 동일
    front -> diag: 7. 진단 api 호출 (cache == false)
  end
end

group case2 (cache == false)
  front -> diag: 8. 진단 api 호출 (cache == false),\n7개 항목별 각각 호출
  front -> front: 9. 진행 중임을 표시
  diag -> diag: 10. 진단 수행하기
  diag -> cache: 11. 진단 수행 결과 저장하기
  diag --> front: 12. 진단 수행 결과 리턴하기
end
== 배치잡 결과 사용 ==

@enduml